@page "/channels"
@page "/channels/{Id}"
@attribute [Authorize]
@inject IStringLocalizer<ChannelPage> T
@inject IThemeManager ThemeManager
@inject NavigationManager NavigationManager
@inject Services.IAccessTokenProvider AccessTokenProvider
@inject Services.ICurrentUserService CurrentUserService
@inject ISnackbar Snackbar
@inject IMessagesClient MessagesClient
@inject IUsersClient UsersClient
@inject IJSRuntime JSRuntime
@implements IDisposable
@using ChatApp.Chat.Messages
@using Microsoft.AspNetCore.Authorization;
@using System.ComponentModel.DataAnnotations

<div class="@(isDarkMode ? "dark" : null)" style="padding-bottom: 150px;">

@foreach (var message in loadedMessages.OrderBy(x => x.Published))
{
    bool first = IsFirst(message);
    bool last = IsLast(message);

    var isAuthorizedToDelete = isInAdminRole || message.PostedById == currentUserId;
    var isAuthorizedToEdit = message.PostedById == currentUserId;

    <Message @key="message.GetHashCode()" Direction="@(message.IsFromCurrentUser ? MessageDirection.Right : MessageDirection.Left)"
        First=@first Last=@last IsFooterVisible=@last IsSideAreaVisible=@(message.PostedById != currentUserId)>
        <SideAreaTemplate>
            @if(first) 
            {   
                <MudTooltip Text="@message.PostedByName">
                    <MudAvatar Class="mt-2" Size="Size.Small">@message.PostedByInitials</MudAvatar>
                </MudTooltip>
            }
        </SideAreaTemplate>
        <ChildContent>
             <Bubble Class="@(message.Deleted is not null ? "deleted" : string.Empty)">
                @if (message.Deleted is not null)
                {
                    <p>@if(message.DeletedById != message.PostedById) 
                        { 
                            <text>@($"{T["DeletedBy", message.DeletedByName!]}")</text> 
                        }
                        else 
                        {
                            <text>@($"{T["Deleted"]}")</text> 
                        }

                        @if (message.Deleted is not null)
                        {
                            <MudTooltip Text="@($"{T["DeletedByAt", message.Deleted.Humanize()!, message.DeletedByName!]}")">
                                <MudIcon Icon="@Icons.Filled.Delete" Size="Size.Small" Style="height: 0.8em; top: 3px; position: relative;" />
                            </MudTooltip>
                        }
                    </p>
                }
                else
                {
                    if (message.ReplyTo is not null)
                    {
                        <div class="reply-bubble @(message.ReplyTo.Deleted is not null ? "deleted" : string.Empty)  @(message.ReplyTo.PostedById == currentUserId ? "right" : "left")">

                        @if (message.ReplyTo.Deleted is not null)
                        {
                            <p>@if(message.ReplyTo.DeletedById != message.ReplyTo.PostedById) 
                                { 
                                    <text>@($"{T["DeletedBy", message.ReplyTo.DeletedByName!]}")</text> 
                                }
                                else 
                                {
                                    <text>@($"{T["Deleted"]}")</text> 
                                }

                                @if (message.ReplyTo.Deleted is not null)
                                {
                                    <MudTooltip Text="@($"{T["DeletedByAt", message.ReplyTo.Deleted.Humanize()!, message.ReplyTo.DeletedByName!]}")">
                                        <MudIcon Icon="@Icons.Filled.Delete" Size="Size.Small" Style="height: 0.8em; top: 3px; position: relative;" />
                                    </MudTooltip>
                                }
                            </p>
                        }
                        else 
                        {
                            <small><b>@(message.ReplyTo.PostedById == currentUserId ? T["Me"] : message.ReplyTo.PostedByName)</b></small>
                            <p> @message.ReplyTo.Content</p>
                        }
                        </div>
                    }

                    @(new MarkupString(message.Content.Replace(Environment.NewLine, "<br />")))

                    @if(message.PostedById == currentUserId || message.Edited is not null) 
                    {
                        <div class="d-inline-flex">

                            @if(message.PostedById == currentUserId) 
                            {
                                if(message.Confirmed) 
                                {
                                    <MudIcon Icon="@Icons.Filled.CheckCircle" Size="Size.Small" Class="ms-1" Style="height: 0.8em; top: 3px; position: relative;" />
                                }
                            }

                            @if (message.Edited is not null)
                            {
                                <MudTooltip Text="@($"{T["EditedBy", message.Edited.Humanize()!, message.EditedByName!]}")">
                                    <MudIcon Icon="@Icons.Filled.Edit" Size="Size.Small" Style="height: 0.8em; top: 3px; position: relative;" />
                                </MudTooltip>
                            }

                        </div>
                    }
            }
            </Bubble>
        </ChildContent>
        
        <FooterTemplate>
            @if(last) 
            {
                <div>
                    <TimeView Context="now">
                    @{
                        var published = message.Published;
                        var timeSince = now - published;
                    }
                    @if (timeSince.TotalMinutes < 30)
                    {
                        <small class="time">
                            @if (timeSince.TotalMinutes >= 1)
                            {
                                <text>@T["TimeDisplay", timeSince.Humanize(minUnit: Humanizer.Localisation.TimeUnit.Minute)]</text>
                            }
                            else
                            {
                                <text>@T["Now"]</text>
                            }
                        </small>
                    }
                    else 
                    {
                        <small>@published.ToString("HH:mm")</small>
                    }
                    </TimeView>
                </div>
            }
        </FooterTemplate>

        <ActionsTemplate>
            @if (message.Deleted is null)
            {
                <MudIconButton Icon="@Icons.Filled.Reply" Style="margin-top: -5px; padding: 10px;" Size="Size.Medium" OnClick="() => ReplyToMessage(message)" />
                
                <MudMenu AnchorOrigin="Origin.BottomLeft">
                    <ActivatorContent>
                        <MudIconButton Style="margin-top: -5px; padding: 10px;" Icon="@Icons.Filled.MoreVert"
                                        Variant="Variant.Text" Color="Color.Secondary" />
                    </ActivatorContent>
                    <ChildContent>
                        @if (isAuthorizedToEdit)
                        {
                            <MudMenuItem OnClick="() => EditMessage(message)">
                                <div class="d-flex flex-row flex-grow-1 gap-2">
                                    <MudIcon Icon="@Icons.Filled.Edit" Size="Size.Medium" />
                                     @T["Edit"]
                                </div>
                            </MudMenuItem>
                        }
                        @if (isAuthorizedToDelete)
                        {
                            <MudMenuItem OnClick="async () => await DeleteMessage(message)">
                                <div class="d-flex flex-row flex-grow-1 gap-2">
                                    <MudIcon Icon="@Icons.Filled.Delete" Size="Size.Medium" />
                                     @T["Delete"]
                                </div>
                            </MudMenuItem>
                        }
                        <MudMenuItem>
                            <div class="d-flex flex-row flex-grow-1 gap-2">
                                <MudIcon Icon="@Icons.Filled.Report" Size="Size.Medium" />
                                @T["Report"]
                            </div>
                        </MudMenuItem>
                    </ChildContent>
                </MudMenu>
            }
        </ActionsTemplate>
    </Message>   
}

@* <Loader class="my-4" /> *@

    <div class="bottom">
        <MudContainer MaxWidth="MaxWidth.Large" Class="pa-0">
            <MudPaper Elevation="35">
                <EditForm OnValidSubmit="Send" Model="@this">
                    <DataAnnotationsValidator />

                    @if (replyToMessage is not null)
                    {
                        <div class="reply-bubble @(replyToMessage.PostedById == currentUserId ? "right" : "left")" style="border-top-left-radius: 4px; border-top-right-radius: 4px;">
                            <div class="d-flex justify-space-between" style="padding-top: 4px">
                                <small><b>@(replyToMessage.PostedById == currentUserId ? T["Me"] : replyToMessage.PostedByName)</b></small>
                                <MudIconButton Icon="@Icons.Filled.Cancel" Size="Size.Small" OnClick="AbortReplyToMessage" />
                            </div>
                            <div>
                                @replyToMessage.Content
                            </div>
                        </div>
                    }

                    @if (editingMessageId is not null)
                    {
                        <div class="d-flex flex-grow-1 gap-4">
                            <MudText Typo="Typo.h6">Editing</MudText>
                            <MudIconButton Icon="@Icons.Filled.Cancel" Size="Size.Small" OnClick="AbortEditMessage" />
                        </div>
                    }

                     <div class="d-flex flex-grow-1 gap-3">
                        <div class="flex-auto d-flex" style="width: 100%">
                            <MudTextField @bind-Value="Text" For="() => Text" aria-label="@T["Message"]" Variant="Variant.Filled" Class="rounded-lg" Lines="2"></MudTextField>
                        </div>
                        <div class="flex-auto d-flex" style="width: 81px">
                            <MudIconButton ButtonType="ButtonType.Submit" aria-label="@T["Send"]" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Send" Class="mt-2" Style="border-radius: 50%; padding: 15px; height: 70px; width: 70px;" />
                        </div>
                    </div>
                </EditForm>
            </MudPaper>
        </MudContainer>
    </div>

</div>
