@using Microsoft.AspNetCore.Authorization;

@page "/channels"
@page "/channels/{Id}"
@attribute [Authorize]
@inject ThemeManager ThemeManager
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject ISnackbar Snackbar
@inject IMessagesClient MessagesClient
@implements IDisposable
@using System.ComponentModel.DataAnnotations

<div class="@(isDarkMode ? "dark" : null)">

@foreach (var post in posts)
{
    bool first = IsFirst(post);
    bool last = IsLast(post);

    <Message @key="post.GetHashCode()" Direction="@(post.IsCurrentUser ? MessageDirection.Right : MessageDirection.Left)"
        First=@first Last=@last IsFooterVisible=@last IsSideAreaVisible=@(post.Sender != MyUserId)>
        <SideAreaTemplate>
            @if(first) 
            {
                <MudAvatar Class="mt-2" Size="Size.Small">@post.Sender</MudAvatar>
            }
        </SideAreaTemplate>
        <ChildContent>
             <Bubble>
                @(new MarkupString(post.Content.Replace(Environment.NewLine, "<br />")))
            </Bubble>
        </ChildContent>
        
        <FooterTemplate>
            @if(last) 
            {
                <TimeView>
                @{
                    var published = post.Published;
                    var timeSince = context - published;
                 }
                @if (timeSince.TotalMinutes < 30)
                {
                    <small class="time">
                        @if (timeSince.TotalMinutes >= 1)
                        {
                            <text>@timeSince.Humanize(minUnit: Humanizer.Localisation.TimeUnit.Minute) ago</text>
                        }
                        else
                        {
                            <text>Now</text>
                        }
                    </small>
                }
                else 
                {
                    <small>@published.ToString("HH:mm")</small>
                }
                </TimeView>
            }
        </FooterTemplate>
    </Message>   
}

@* <Loader class="my-4" /> *@

<MudPaper Elevation="35" Class="mt-8 pa-4">
    <EditForm OnValidSubmit="Send" Model="@this">
        <DataAnnotationsValidator />

        <MudTextField @bind-Value="Text" Label="Message" Lines="3" For="() => Text"></MudTextField>
        <MudButton ButtonType="ButtonType.Submit">Send</MudButton>
    </EditForm>
</MudPaper>

</div>
